---
import type { PaginateFunction, Page } from 'astro';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { PAGE_SIZE, getPosts } from '../../../config';
import { getCollection } from 'astro:content';
import Base from '../../../layouts/base.astro';
import PageHero from '../../../components/pagehero.astro';
import BlogRoll from '../../../components/blogroll.astro';
import PaginateControl from '../../../components/paginatecontrol.astro';

export interface Props {
  page: Page<CollectionEntry<'blog'>>;
}

const { author } = Astro.params;
const { page } = Astro.props;

// Fetch author details
const detail = await getEntry('author', author!);

if (!detail) {
  throw new Error(`Author not found: ${author}`);
}

const frontmatter: CollectionEntry<'page'>['data'] = {
  title: `Author: ${detail.data.title}` + (page.size < page.total ? ` (page ${page.currentPage} of ${page.lastPage})` : ''),
  description: `${detail.data.description}. Showing articles ${page.start + 1}-${page.end + 1} (total ${page.total}).`,
};

const currentPage = Astro.url.pathname.replace(/(\/\d*)?\/$/, '');

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const authors = await getCollection('author');
  const posts = await getPosts();

  return authors.flatMap((author) => {
    // Ensure the slug exists before filtering
    if (!author.slug) {
      console.error(`Author has no slug:`, author);
      return [];
    }
    
    return paginate(
      posts.filter((post) => post.data.author?.slug === author.slug),
      {
        params: { author: author.slug },
        pageSize: PAGE_SIZE,
      }
    );
  });
}
---

<Base frontmatter={frontmatter} schema='CollectionPage'>
  <header>
    <PageHero title={frontmatter.title} description={frontmatter.description}>
      <Image
        src={detail.data.image}
        alt={detail.data.title}
        class='mt-4 h-32 w-32 rounded-full object-cover object-center'
      />
      <PaginateControl base={currentPage} page={page} />
    </PageHero>
  </header>
  <main class='mt-10 bg-gray-100 dark:bg-gray-900'>
    <BlogRoll posts={page.data} />
  </main>
</Base>
